{"version":3,"sources":["store/reducer.ts","store/types.ts","store/actions.ts","components/Spinner/index.tsx","components/WisdomRow/index.tsx","components/Wisdom/index.tsx","components/Link/index.tsx","containers/Navigation/index.tsx","containers/WisdomWrapper/index.tsx","components/TextComponent/index.tsx","containers/HomePageWrapper/index.tsx","components/Page404/index.tsx","api/index.ts","containers/App/index.tsx","index.tsx"],"names":["initialState","wisdoms","firstWisdomId","wisdomsMap","prev","current","next","isLoading","steps","shouldRedirect","homeAnimationCompleted","homePageMessages","1","3","5","Store","state","action","type","payload","id","toString","w","currentLength","length","findIndex","el","fetchWisdoms","data","setIsLoading","Spinner","className","Row","map","elem","onlyOneWisdom","wisdomLength","wisdom","noAuthor","author","classes","key","Wisdom","useState","start","inProgress","finished","animations","setAnimations","setClasses","direction","setDirection","useSelector","s","history","useHistory","handleChangeWisdom","useEffect","changeWisdom","e","code","document","addEventListener","removeEventListener","isPrev","setTimeout","push","style","backgroundImage","image","replace","onClick","clientX","window","innerWidth","content","Link","to","children","blank","href","target","undefined","Navigation","WisdomWrapper","dispatch","useDispatch","useParams","setSelectedWisdom","TextComponent","message","HomePageWrapper","Page404","request","a","axios","get","getWisdoms","result","App","location","useLocation","then","res","catch","err","console","log","DummyWisdoms","pathname","exact","path","component","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","app","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1fcbe543.chunk.js","sourcesContent":["import * as Types from './types';\n\nimport { ActionInterface, StoreInterface } from 'interfaces';\n\nconst initialState: StoreInterface = {\n  wisdoms: null,\n  firstWisdomId: '',\n  wisdomsMap: {\n    prev: null,\n    current: null,\n    next: null,\n  },\n  isLoading: false,\n  steps: 0,\n  shouldRedirect: false,\n  homeAnimationCompleted: false,\n  homePageMessages: {\n    1: 'это птица?',\n    3: 'это самолет?',\n    5: 'это #titaniumWisdom!',\n  },\n};\n\nconst Store = (state = initialState, action: ActionInterface): StoreInterface => {\n  switch (action.type) {\n    case Types.FETCH_WISDOMS:\n      return {\n        ...state,\n        wisdoms: action.payload,\n      };\n    case Types.SET_ISLOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case Types.INCREMENT_STEPS:\n      if (state.steps === 5) {\n        return {\n          ...state,\n          homeAnimationCompleted: true,\n        };\n      }\n      return {\n        ...state,\n        steps: state.steps + 1,\n      };\n    case Types.RESET_STEPS:\n      return {\n        ...state,\n        steps: 0,\n        homeAnimationCompleted: false,\n      };\n    case Types.RESET_REDIRECT:\n      return {\n        ...state,\n        shouldRedirect: false,\n      };\n    case Types.SET_FIRST_WISDOM:\n      return {\n        ...state,\n        firstWisdomId: state.wisdoms?.[0].id.toString(),\n      };\n    case Types.SET_SELECTED_WISDOM:\n      const { wisdoms: w } = state;\n\n      if (w) {\n        const currentLength = w.length - 1;\n        const current = w.findIndex(el => el.id.toString() === action.payload);\n        let prev = current <= 0 ? w[currentLength] : w[current - 1];\n        let next = current >= currentLength ? w[0] : w[current + 1];\n\n        if (current === -1) {\n          return {\n            ...state,\n            shouldRedirect: true,\n            wisdomsMap: {\n              prev: null,\n              current: null,\n              next: null,\n            },\n            isLoading: false,\n          };\n        }\n\n        return {\n          ...state,\n          shouldRedirect: current === -1 ? true : false,\n          wisdomsMap: {\n            ...state.wisdomsMap,\n            current: current === -1 ? null : w[current],\n            prev,\n            next,\n          },\n          isLoading: false,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default Store;\n","export const INCREMENT_STEPS = 'INCREMENT_STEPS';\nexport const RESET_STEPS = 'RESET_STEPS';\nexport const SET_SELECTED_WISDOM = 'SET_SELECTED_WISDOM';\nexport const SET_ISLOADING = 'SET_ISLOADING';\nexport const RESET_REDIRECT = 'RESET_REDIRECT';\nexport const GET_HOME_MESSAGES = 'GET_HOME_MESSAGES';\nexport const SET_FIRST_WISDOM = 'SET_FIRST_WISDOM';\nexport const FETCH_WISDOMS = 'FETCH_WISDOMS';\n","import * as Types from './types';\n\nimport { WisdomInterface } from 'interfaces';\n\nexport const incrementSteps = () => ({\n  type: Types.INCREMENT_STEPS,\n});\n\nexport const resetSteps = () => ({\n  type: Types.RESET_STEPS,\n});\n\nexport const resetRedirect = () => ({\n  type: Types.RESET_REDIRECT,\n});\n\nexport const getHomeMessages = () => ({\n  type: Types.GET_HOME_MESSAGES,\n});\n\nexport const setFirstWisdom = () => ({\n  type: Types.SET_FIRST_WISDOM,\n});\n\nexport const fetchWisdoms = (data: WisdomInterface[]) => ({\n  type: Types.FETCH_WISDOMS,\n  payload: data,\n});\n\nexport const setSelectedWisdom = (id: string | undefined) => {\n  return (dispatch: Function) => {\n    dispatch(setIsLoading());\n    dispatch({\n      type: Types.SET_SELECTED_WISDOM,\n      payload: id,\n    });\n  };\n};\n\nconst setIsLoading = () => ({\n  type: Types.SET_ISLOADING,\n});\n","import React from 'react';\n\nimport 'assets/styles/components/Spinner.scss';\n\nconst Spinner = () => (\n  <div className=\"loader-overlay\">\n    <div className=\"loader\"></div>\n  </div>\n);\n\nexport default Spinner;\n","import React, { FC } from 'react';\nimport { WisdomInterface } from 'interfaces';\n\ntype wisdomContent = { wisdom: string; author: string };\n\ntype Props = {\n  current: WisdomInterface['content'];\n};\n\nconst Row: FC<Props> = ({ current }) => {\n  return (\n    <>\n      {current.map((elem: wisdomContent) => {\n        const onlyOneWisdom = current.length <= 1;\n        const wisdomLength = elem.wisdom.length;\n        const noAuthor = elem.author.length === 0;\n        const classes = `wisdom-row ${onlyOneWisdom ? 'single' : ''} ${\n          wisdomLength >= 70 ? 'small' : ''\n        }`;\n\n        return (\n          <div className={classes} key={elem.wisdom}>\n            <span>{elem.wisdom}</span>{' '}\n            <p className={`wisdom-author ${noAuthor ? 'no-author' : ''}`}>{elem.author}</p>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Row;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport Spinner from 'components/Spinner';\nimport Row from 'components/WisdomRow';\nimport { StoreInterface } from 'interfaces';\n\nimport 'assets/styles/components/Wisdom.scss';\n\nconst BASE_IMAGE_URL = 'https://raw.githubusercontent.com/AlexanderC/nakla.fun/master/stories/images/';\n\nconst Wisdom = () => {\n  const [animations, setAnimations] = useState({\n    start: false,\n    inProgress: false,\n    finished: false,\n  });\n  const [classes, setClasses] = useState('animation-end');\n  const [direction, setDirection] = useState<'next' | 'prev'>('next');\n  const {\n    wisdoms,\n    wisdomsMap: { current, next, prev },\n  } = useSelector((s: StoreInterface) => s);\n  const history = useHistory();\n\n  const handleChangeWisdom = (direction: 'prev' | 'next') => {\n    setDirection(direction);\n    setAnimations({ ...animations, start: true });\n  };\n\n  useEffect(() => {\n    const changeWisdom = (e: KeyboardEvent) => {\n      if (e.code === 'ArrowLeft') {\n        handleChangeWisdom('prev');\n      }\n      if (e.code === 'ArrowRight') {\n        handleChangeWisdom('next');\n      }\n    };\n    document.addEventListener('keydown', changeWisdom);\n    return () => document.removeEventListener('keydown', changeWisdom);\n  });\n\n  useEffect(() => {\n    if (current && next && prev) {\n      const isPrev = direction === 'prev';\n\n      if (animations.start) {\n        setClasses(`animation-start-${isPrev ? 'prev' : 'next'}`);\n        setTimeout(() => {\n          setAnimations({ ...animations, start: false, inProgress: true });\n        }, 400);\n      }\n\n      if (animations.inProgress) {\n        history.push(`/wisdoms/${isPrev ? prev.id.toString() : next.id.toString()}`);\n        setAnimations({ ...animations, inProgress: false, finished: true });\n      }\n\n      if (animations.finished) {\n        setClasses(`animation-end-${isPrev ? 'prev' : 'next'}`);\n        setAnimations({ ...animations, finished: false });\n      }\n    }\n  }, [animations, history, wisdoms, next, current, direction, prev]);\n\n  if (current) {\n    return (\n      <div\n        className={`wisdom ${classes}`}\n        style={{\n          backgroundImage: `url(${BASE_IMAGE_URL}${current.image.replace(' ', '%20')})`,\n        }}\n      >\n        <div className=\"black-filter\">\n          <div\n            className=\"wisdom-content\"\n            onClick={e => handleChangeWisdom(e.clientX < window.innerWidth / 2 ? 'prev' : 'next')}\n          >\n            <div className=\"one-wisdom-wrapper\">\n              <Row current={current.content} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return <Spinner />;\n};\n\nexport default Wisdom;\n","import React from 'react';\n\nimport { LinkInterface } from 'interfaces';\n\nimport 'assets/styles/components/Link.scss';\n\nconst Link = ({ to, children, blank }: LinkInterface) => (\n  <a href={to} target={blank ? '_blank' : undefined} className=\"nav-link\">\n    {children}\n  </a>\n);\n\nexport default Link;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport CustomLink from 'components/Link';\n\nimport 'assets/styles/containers/Navigation.scss';\n\nconst Navigation = () => (\n  <div className=\"navigation-wrapper\">\n    <div className=\"navigation-overlay\"></div>\n    <div className=\"navigation-content\">\n      <Link to=\"/home\" className=\"navigation-title\">\n        #titaniumwisdom\n      </Link>\n      <div className=\"navigation-controls\">\n        <CustomLink to=\"https://github.com/AlexanderC/nakla.fun/graphs/contributors\" blank>\n          Лица\n        </CustomLink>\n        <CustomLink to=\"https://github.com/AlexanderC/nakla.fun/issues/new\" blank>\n          Хочу Добавить!\n        </CustomLink>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Navigation;\n","import React, { useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setSelectedWisdom } from 'store/actions';\n\nimport Wisdom from 'components/Wisdom';\nimport Spinner from 'components/Spinner';\nimport Navigation from 'containers/Navigation';\n\nimport { StoreInterface } from 'interfaces';\n\nconst WisdomWrapper = () => {\n  const { shouldRedirect, wisdomsMap } = useSelector((s: StoreInterface) => s);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n  const history = useHistory();\n\n  useEffect(() => {\n    dispatch(setSelectedWisdom(id));\n    if (shouldRedirect) {\n      history.push('/404');\n    }\n  }, [dispatch, history, id, shouldRedirect]);\n\n  if (wisdomsMap.current) {\n    return (\n      <>\n        <Navigation />\n        <Wisdom />\n      </>\n    );\n  }\n\n  return <Spinner />;\n};\n\nexport default WisdomWrapper;\n","import React from 'react';\n\nimport { TextComponentInterface } from 'interfaces';\n\nimport 'assets/styles/components/TextComponents.scss';\n\nconst TextComponent = ({ message, classes }: TextComponentInterface) => (\n  <div className={`main-text ${classes}`}>{message}</div>\n);\n\nexport default TextComponent;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport TextComponent from 'components/TextComponent';\n\nimport { StoreInterface } from 'interfaces';\n\nconst HomePageWrapper = () => {\n  const { homePageMessages, steps } = useSelector((s: StoreInterface) => s);\n\n  if (steps % 2 === 0) {\n    return null;\n  }\n\n  return <TextComponent message={homePageMessages[steps]} classes={`step-${steps}`} />;\n};\n\nexport default HomePageWrapper;\n","import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { resetRedirect } from 'store/actions';\n\nimport 'assets/styles/components/404.scss';\n\nconst Page404 = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(resetRedirect());\n  }, [dispatch]);\n\n  return (\n    <div className=\"page-404-wrapper\">\n      <div className=\"title\">404</div>\n      <div className=\"subtitle\">Page not found</div>\n      <Link to=\"/home\" className=\"link-not-found\">\n        Home\n      </Link>\n    </div>\n  );\n};\n\nexport default Page404;\n","import axios from 'axios';\n\nconst baseUrl = 'https://raw.githubusercontent.com/AlexanderC/nakla.fun/master/stories';\n\nconst request = async () => {\n  return await axios.get(`${baseUrl}/wisdoms.json`);\n};\n\nexport const getWisdoms = async () => {\n  const result = await request();\n  return result.data;\n};\n","import React, { useEffect } from 'react';\nimport { Route, useHistory, Redirect, Switch, useLocation } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport WisdomWrapper from 'containers/WisdomWrapper';\nimport HomePageWrapper from 'containers/HomePageWrapper';\nimport Page404 from 'components/Page404';\nimport Spinner from 'components/Spinner';\n\nimport { incrementSteps, resetSteps, setFirstWisdom, fetchWisdoms } from 'store/actions';\n\nimport { StoreInterface } from 'interfaces';\nimport { getWisdoms } from 'api';\nimport DummyWisdoms from 'fallback-data/wisdoms.json';\n\nimport 'assets/styles/containers/App.scss';\n\nconst App = () => {\n  const { wisdoms, steps, firstWisdomId, homeAnimationCompleted } = useSelector(\n    (s: StoreInterface) => s\n  );\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!wisdoms) {\n      getWisdoms()\n        .then(res => {\n          dispatch(fetchWisdoms(res));\n        })\n        .catch(err => {\n          console.log(err);\n          dispatch(fetchWisdoms(DummyWisdoms));\n        });\n    }\n    if (wisdoms) {\n      dispatch(setFirstWisdom());\n    }\n  }, [dispatch, wisdoms]);\n\n  useEffect(() => {\n    if (location.pathname === '/home') {\n      const interval = steps % 2 === 0 ? 200 : 2000;\n      if (!homeAnimationCompleted) {\n        setTimeout(() => {\n          dispatch(incrementSteps());\n        }, interval);\n      }\n    }\n  }, [dispatch, homeAnimationCompleted, location.pathname, steps]);\n\n  useEffect(() => {\n    if (homeAnimationCompleted) {\n      history.push(`/wisdoms/${firstWisdomId}`);\n      dispatch(resetSteps());\n    }\n  }, [dispatch, firstWisdomId, history, homeAnimationCompleted]);\n\n  if (wisdoms) {\n    return (\n      <div className=\"app-root full-screen flex-centered\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/home\" />\n          </Route>\n          <Route exact path=\"/home\">\n            <HomePageWrapper />\n          </Route>\n          <Route exact path=\"/wisdoms/:id\">\n            <WisdomWrapper />\n          </Route>\n          <Route path=\"/404\" component={Page404} />\n          <Route path=\"*\">\n            <Redirect to=\"/404\" />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n\n  return <Spinner />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from 'store/reducer';\n\nimport thunk from 'redux-thunk';\n\nimport App from 'containers/App';\n\nimport 'index.scss';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n"],"sourceRoot":""}